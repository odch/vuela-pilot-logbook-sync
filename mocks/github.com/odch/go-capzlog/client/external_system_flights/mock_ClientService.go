// Code generated by mockery v2.23.4. DO NOT EDIT.

package external_system_flights

import (
	io "io"

	external_system_flights "github.com/odch/go-capzlog/client/external_system_flights"

	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// ExternalSystemFlightsDelete provides a mock function with given fields: params, authInfo, writer, opts
func (_m *MockClientService) ExternalSystemFlightsDelete(params *external_system_flights.ExternalSystemFlightsDeleteParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...external_system_flights.ClientOption) (*external_system_flights.ExternalSystemFlightsDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo, writer)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *external_system_flights.ExternalSystemFlightsDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*external_system_flights.ExternalSystemFlightsDeleteParams, runtime.ClientAuthInfoWriter, io.Writer, ...external_system_flights.ClientOption) (*external_system_flights.ExternalSystemFlightsDeleteOK, error)); ok {
		return rf(params, authInfo, writer, opts...)
	}
	if rf, ok := ret.Get(0).(func(*external_system_flights.ExternalSystemFlightsDeleteParams, runtime.ClientAuthInfoWriter, io.Writer, ...external_system_flights.ClientOption) *external_system_flights.ExternalSystemFlightsDeleteOK); ok {
		r0 = rf(params, authInfo, writer, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*external_system_flights.ExternalSystemFlightsDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*external_system_flights.ExternalSystemFlightsDeleteParams, runtime.ClientAuthInfoWriter, io.Writer, ...external_system_flights.ClientOption) error); ok {
		r1 = rf(params, authInfo, writer, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ExternalSystemFlightsDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExternalSystemFlightsDelete'
type MockClientService_ExternalSystemFlightsDelete_Call struct {
	*mock.Call
}

// ExternalSystemFlightsDelete is a helper method to define mock.On call
//   - params *external_system_flights.ExternalSystemFlightsDeleteParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - writer io.Writer
//   - opts ...external_system_flights.ClientOption
func (_e *MockClientService_Expecter) ExternalSystemFlightsDelete(params interface{}, authInfo interface{}, writer interface{}, opts ...interface{}) *MockClientService_ExternalSystemFlightsDelete_Call {
	return &MockClientService_ExternalSystemFlightsDelete_Call{Call: _e.mock.On("ExternalSystemFlightsDelete",
		append([]interface{}{params, authInfo, writer}, opts...)...)}
}

func (_c *MockClientService_ExternalSystemFlightsDelete_Call) Run(run func(params *external_system_flights.ExternalSystemFlightsDeleteParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...external_system_flights.ClientOption)) *MockClientService_ExternalSystemFlightsDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]external_system_flights.ClientOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(external_system_flights.ClientOption)
			}
		}
		run(args[0].(*external_system_flights.ExternalSystemFlightsDeleteParams), args[1].(runtime.ClientAuthInfoWriter), args[2].(io.Writer), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ExternalSystemFlightsDelete_Call) Return(_a0 *external_system_flights.ExternalSystemFlightsDeleteOK, _a1 error) *MockClientService_ExternalSystemFlightsDelete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ExternalSystemFlightsDelete_Call) RunAndReturn(run func(*external_system_flights.ExternalSystemFlightsDeleteParams, runtime.ClientAuthInfoWriter, io.Writer, ...external_system_flights.ClientOption) (*external_system_flights.ExternalSystemFlightsDeleteOK, error)) *MockClientService_ExternalSystemFlightsDelete_Call {
	_c.Call.Return(run)
	return _c
}

// ExternalSystemFlightsGet provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ExternalSystemFlightsGet(params *external_system_flights.ExternalSystemFlightsGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...external_system_flights.ClientOption) (*external_system_flights.ExternalSystemFlightsGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *external_system_flights.ExternalSystemFlightsGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*external_system_flights.ExternalSystemFlightsGetParams, runtime.ClientAuthInfoWriter, ...external_system_flights.ClientOption) (*external_system_flights.ExternalSystemFlightsGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*external_system_flights.ExternalSystemFlightsGetParams, runtime.ClientAuthInfoWriter, ...external_system_flights.ClientOption) *external_system_flights.ExternalSystemFlightsGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*external_system_flights.ExternalSystemFlightsGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*external_system_flights.ExternalSystemFlightsGetParams, runtime.ClientAuthInfoWriter, ...external_system_flights.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ExternalSystemFlightsGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExternalSystemFlightsGet'
type MockClientService_ExternalSystemFlightsGet_Call struct {
	*mock.Call
}

// ExternalSystemFlightsGet is a helper method to define mock.On call
//   - params *external_system_flights.ExternalSystemFlightsGetParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...external_system_flights.ClientOption
func (_e *MockClientService_Expecter) ExternalSystemFlightsGet(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ExternalSystemFlightsGet_Call {
	return &MockClientService_ExternalSystemFlightsGet_Call{Call: _e.mock.On("ExternalSystemFlightsGet",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ExternalSystemFlightsGet_Call) Run(run func(params *external_system_flights.ExternalSystemFlightsGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...external_system_flights.ClientOption)) *MockClientService_ExternalSystemFlightsGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]external_system_flights.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(external_system_flights.ClientOption)
			}
		}
		run(args[0].(*external_system_flights.ExternalSystemFlightsGetParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ExternalSystemFlightsGet_Call) Return(_a0 *external_system_flights.ExternalSystemFlightsGetOK, _a1 error) *MockClientService_ExternalSystemFlightsGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ExternalSystemFlightsGet_Call) RunAndReturn(run func(*external_system_flights.ExternalSystemFlightsGetParams, runtime.ClientAuthInfoWriter, ...external_system_flights.ClientOption) (*external_system_flights.ExternalSystemFlightsGetOK, error)) *MockClientService_ExternalSystemFlightsGet_Call {
	_c.Call.Return(run)
	return _c
}

// ExternalSystemFlightsPost provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ExternalSystemFlightsPost(params *external_system_flights.ExternalSystemFlightsPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...external_system_flights.ClientOption) (*external_system_flights.ExternalSystemFlightsPostOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *external_system_flights.ExternalSystemFlightsPostOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*external_system_flights.ExternalSystemFlightsPostParams, runtime.ClientAuthInfoWriter, ...external_system_flights.ClientOption) (*external_system_flights.ExternalSystemFlightsPostOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*external_system_flights.ExternalSystemFlightsPostParams, runtime.ClientAuthInfoWriter, ...external_system_flights.ClientOption) *external_system_flights.ExternalSystemFlightsPostOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*external_system_flights.ExternalSystemFlightsPostOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*external_system_flights.ExternalSystemFlightsPostParams, runtime.ClientAuthInfoWriter, ...external_system_flights.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ExternalSystemFlightsPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExternalSystemFlightsPost'
type MockClientService_ExternalSystemFlightsPost_Call struct {
	*mock.Call
}

// ExternalSystemFlightsPost is a helper method to define mock.On call
//   - params *external_system_flights.ExternalSystemFlightsPostParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...external_system_flights.ClientOption
func (_e *MockClientService_Expecter) ExternalSystemFlightsPost(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ExternalSystemFlightsPost_Call {
	return &MockClientService_ExternalSystemFlightsPost_Call{Call: _e.mock.On("ExternalSystemFlightsPost",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ExternalSystemFlightsPost_Call) Run(run func(params *external_system_flights.ExternalSystemFlightsPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...external_system_flights.ClientOption)) *MockClientService_ExternalSystemFlightsPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]external_system_flights.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(external_system_flights.ClientOption)
			}
		}
		run(args[0].(*external_system_flights.ExternalSystemFlightsPostParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ExternalSystemFlightsPost_Call) Return(_a0 *external_system_flights.ExternalSystemFlightsPostOK, _a1 error) *MockClientService_ExternalSystemFlightsPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ExternalSystemFlightsPost_Call) RunAndReturn(run func(*external_system_flights.ExternalSystemFlightsPostParams, runtime.ClientAuthInfoWriter, ...external_system_flights.ClientOption) (*external_system_flights.ExternalSystemFlightsPostOK, error)) *MockClientService_ExternalSystemFlightsPost_Call {
	_c.Call.Return(run)
	return _c
}

// ExternalSystemFlightsPostMultiple provides a mock function with given fields: params, authInfo, writer, opts
func (_m *MockClientService) ExternalSystemFlightsPostMultiple(params *external_system_flights.ExternalSystemFlightsPostMultipleParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...external_system_flights.ClientOption) (*external_system_flights.ExternalSystemFlightsPostMultipleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo, writer)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *external_system_flights.ExternalSystemFlightsPostMultipleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*external_system_flights.ExternalSystemFlightsPostMultipleParams, runtime.ClientAuthInfoWriter, io.Writer, ...external_system_flights.ClientOption) (*external_system_flights.ExternalSystemFlightsPostMultipleOK, error)); ok {
		return rf(params, authInfo, writer, opts...)
	}
	if rf, ok := ret.Get(0).(func(*external_system_flights.ExternalSystemFlightsPostMultipleParams, runtime.ClientAuthInfoWriter, io.Writer, ...external_system_flights.ClientOption) *external_system_flights.ExternalSystemFlightsPostMultipleOK); ok {
		r0 = rf(params, authInfo, writer, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*external_system_flights.ExternalSystemFlightsPostMultipleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*external_system_flights.ExternalSystemFlightsPostMultipleParams, runtime.ClientAuthInfoWriter, io.Writer, ...external_system_flights.ClientOption) error); ok {
		r1 = rf(params, authInfo, writer, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ExternalSystemFlightsPostMultiple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExternalSystemFlightsPostMultiple'
type MockClientService_ExternalSystemFlightsPostMultiple_Call struct {
	*mock.Call
}

// ExternalSystemFlightsPostMultiple is a helper method to define mock.On call
//   - params *external_system_flights.ExternalSystemFlightsPostMultipleParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - writer io.Writer
//   - opts ...external_system_flights.ClientOption
func (_e *MockClientService_Expecter) ExternalSystemFlightsPostMultiple(params interface{}, authInfo interface{}, writer interface{}, opts ...interface{}) *MockClientService_ExternalSystemFlightsPostMultiple_Call {
	return &MockClientService_ExternalSystemFlightsPostMultiple_Call{Call: _e.mock.On("ExternalSystemFlightsPostMultiple",
		append([]interface{}{params, authInfo, writer}, opts...)...)}
}

func (_c *MockClientService_ExternalSystemFlightsPostMultiple_Call) Run(run func(params *external_system_flights.ExternalSystemFlightsPostMultipleParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...external_system_flights.ClientOption)) *MockClientService_ExternalSystemFlightsPostMultiple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]external_system_flights.ClientOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(external_system_flights.ClientOption)
			}
		}
		run(args[0].(*external_system_flights.ExternalSystemFlightsPostMultipleParams), args[1].(runtime.ClientAuthInfoWriter), args[2].(io.Writer), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ExternalSystemFlightsPostMultiple_Call) Return(_a0 *external_system_flights.ExternalSystemFlightsPostMultipleOK, _a1 error) *MockClientService_ExternalSystemFlightsPostMultiple_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ExternalSystemFlightsPostMultiple_Call) RunAndReturn(run func(*external_system_flights.ExternalSystemFlightsPostMultipleParams, runtime.ClientAuthInfoWriter, io.Writer, ...external_system_flights.ClientOption) (*external_system_flights.ExternalSystemFlightsPostMultipleOK, error)) *MockClientService_ExternalSystemFlightsPostMultiple_Call {
	_c.Call.Return(run)
	return _c
}

// ExternalSystemFlightsPut provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ExternalSystemFlightsPut(params *external_system_flights.ExternalSystemFlightsPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...external_system_flights.ClientOption) (*external_system_flights.ExternalSystemFlightsPutOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *external_system_flights.ExternalSystemFlightsPutOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*external_system_flights.ExternalSystemFlightsPutParams, runtime.ClientAuthInfoWriter, ...external_system_flights.ClientOption) (*external_system_flights.ExternalSystemFlightsPutOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*external_system_flights.ExternalSystemFlightsPutParams, runtime.ClientAuthInfoWriter, ...external_system_flights.ClientOption) *external_system_flights.ExternalSystemFlightsPutOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*external_system_flights.ExternalSystemFlightsPutOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*external_system_flights.ExternalSystemFlightsPutParams, runtime.ClientAuthInfoWriter, ...external_system_flights.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ExternalSystemFlightsPut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExternalSystemFlightsPut'
type MockClientService_ExternalSystemFlightsPut_Call struct {
	*mock.Call
}

// ExternalSystemFlightsPut is a helper method to define mock.On call
//   - params *external_system_flights.ExternalSystemFlightsPutParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...external_system_flights.ClientOption
func (_e *MockClientService_Expecter) ExternalSystemFlightsPut(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ExternalSystemFlightsPut_Call {
	return &MockClientService_ExternalSystemFlightsPut_Call{Call: _e.mock.On("ExternalSystemFlightsPut",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ExternalSystemFlightsPut_Call) Run(run func(params *external_system_flights.ExternalSystemFlightsPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...external_system_flights.ClientOption)) *MockClientService_ExternalSystemFlightsPut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]external_system_flights.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(external_system_flights.ClientOption)
			}
		}
		run(args[0].(*external_system_flights.ExternalSystemFlightsPutParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ExternalSystemFlightsPut_Call) Return(_a0 *external_system_flights.ExternalSystemFlightsPutOK, _a1 error) *MockClientService_ExternalSystemFlightsPut_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ExternalSystemFlightsPut_Call) RunAndReturn(run func(*external_system_flights.ExternalSystemFlightsPutParams, runtime.ClientAuthInfoWriter, ...external_system_flights.ClientOption) (*external_system_flights.ExternalSystemFlightsPutOK, error)) *MockClientService_ExternalSystemFlightsPut_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
