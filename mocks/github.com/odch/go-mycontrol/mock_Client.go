// Code generated by mockery v2.23.4. DO NOT EDIT.

package mycontrol

import (
	mycontrol "github.com/odch/go-mycontrol"
	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// AddFlight provides a mock function with given fields: flight
func (_m *MockClient) AddFlight(flight *mycontrol.Flight) (*mycontrol.Flight, error) {
	ret := _m.Called(flight)

	var r0 *mycontrol.Flight
	var r1 error
	if rf, ok := ret.Get(0).(func(*mycontrol.Flight) (*mycontrol.Flight, error)); ok {
		return rf(flight)
	}
	if rf, ok := ret.Get(0).(func(*mycontrol.Flight) *mycontrol.Flight); ok {
		r0 = rf(flight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mycontrol.Flight)
		}
	}

	if rf, ok := ret.Get(1).(func(*mycontrol.Flight) error); ok {
		r1 = rf(flight)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_AddFlight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFlight'
type MockClient_AddFlight_Call struct {
	*mock.Call
}

// AddFlight is a helper method to define mock.On call
//   - flight *mycontrol.Flight
func (_e *MockClient_Expecter) AddFlight(flight interface{}) *MockClient_AddFlight_Call {
	return &MockClient_AddFlight_Call{Call: _e.mock.On("AddFlight", flight)}
}

func (_c *MockClient_AddFlight_Call) Run(run func(flight *mycontrol.Flight)) *MockClient_AddFlight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mycontrol.Flight))
	})
	return _c
}

func (_c *MockClient_AddFlight_Call) Return(_a0 *mycontrol.Flight, _a1 error) *MockClient_AddFlight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_AddFlight_Call) RunAndReturn(run func(*mycontrol.Flight) (*mycontrol.Flight, error)) *MockClient_AddFlight_Call {
	_c.Call.Return(run)
	return _c
}

// GetFlight provides a mock function with given fields: id
func (_m *MockClient) GetFlight(id string) (*mycontrol.Flight, error) {
	ret := _m.Called(id)

	var r0 *mycontrol.Flight
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*mycontrol.Flight, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *mycontrol.Flight); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mycontrol.Flight)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetFlight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlight'
type MockClient_GetFlight_Call struct {
	*mock.Call
}

// GetFlight is a helper method to define mock.On call
//   - id string
func (_e *MockClient_Expecter) GetFlight(id interface{}) *MockClient_GetFlight_Call {
	return &MockClient_GetFlight_Call{Call: _e.mock.On("GetFlight", id)}
}

func (_c *MockClient_GetFlight_Call) Run(run func(id string)) *MockClient_GetFlight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetFlight_Call) Return(_a0 *mycontrol.Flight, _a1 error) *MockClient_GetFlight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetFlight_Call) RunAndReturn(run func(string) (*mycontrol.Flight, error)) *MockClient_GetFlight_Call {
	_c.Call.Return(run)
	return _c
}

// GetFlights provides a mock function with given fields: options
func (_m *MockClient) GetFlights(options *mycontrol.FlightsListOptions) (*mycontrol.FlightsList, error) {
	ret := _m.Called(options)

	var r0 *mycontrol.FlightsList
	var r1 error
	if rf, ok := ret.Get(0).(func(*mycontrol.FlightsListOptions) (*mycontrol.FlightsList, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*mycontrol.FlightsListOptions) *mycontrol.FlightsList); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mycontrol.FlightsList)
		}
	}

	if rf, ok := ret.Get(1).(func(*mycontrol.FlightsListOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetFlights_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlights'
type MockClient_GetFlights_Call struct {
	*mock.Call
}

// GetFlights is a helper method to define mock.On call
//   - options *mycontrol.FlightsListOptions
func (_e *MockClient_Expecter) GetFlights(options interface{}) *MockClient_GetFlights_Call {
	return &MockClient_GetFlights_Call{Call: _e.mock.On("GetFlights", options)}
}

func (_c *MockClient_GetFlights_Call) Run(run func(options *mycontrol.FlightsListOptions)) *MockClient_GetFlights_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mycontrol.FlightsListOptions))
	})
	return _c
}

func (_c *MockClient_GetFlights_Call) Return(_a0 *mycontrol.FlightsList, _a1 error) *MockClient_GetFlights_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetFlights_Call) RunAndReturn(run func(*mycontrol.FlightsListOptions) (*mycontrol.FlightsList, error)) *MockClient_GetFlights_Call {
	_c.Call.Return(run)
	return _c
}

// GetToken provides a mock function with given fields:
func (_m *MockClient) GetToken() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetToken'
type MockClient_GetToken_Call struct {
	*mock.Call
}

// GetToken is a helper method to define mock.On call
func (_e *MockClient_Expecter) GetToken() *MockClient_GetToken_Call {
	return &MockClient_GetToken_Call{Call: _e.mock.On("GetToken")}
}

func (_c *MockClient_GetToken_Call) Run(run func()) *MockClient_GetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_GetToken_Call) Return(_a0 string, _a1 error) *MockClient_GetToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetToken_Call) RunAndReturn(run func() (string, error)) *MockClient_GetToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
