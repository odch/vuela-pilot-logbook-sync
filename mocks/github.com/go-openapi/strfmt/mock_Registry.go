// Code generated by mockery v2.23.4. DO NOT EDIT.

package strfmt

import (
	mapstructure "github.com/mitchellh/mapstructure"
	mock "github.com/stretchr/testify/mock"

	reflect "reflect"

	strfmt "github.com/go-openapi/strfmt"
)

// MockRegistry is an autogenerated mock type for the Registry type
type MockRegistry struct {
	mock.Mock
}

type MockRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegistry) EXPECT() *MockRegistry_Expecter {
	return &MockRegistry_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockRegistry) Add(_a0 string, _a1 strfmt.Format, _a2 strfmt.Validator) bool {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, strfmt.Format, strfmt.Validator) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockRegistry_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockRegistry_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - _a0 string
//   - _a1 strfmt.Format
//   - _a2 strfmt.Validator
func (_e *MockRegistry_Expecter) Add(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockRegistry_Add_Call {
	return &MockRegistry_Add_Call{Call: _e.mock.On("Add", _a0, _a1, _a2)}
}

func (_c *MockRegistry_Add_Call) Run(run func(_a0 string, _a1 strfmt.Format, _a2 strfmt.Validator)) *MockRegistry_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(strfmt.Format), args[2].(strfmt.Validator))
	})
	return _c
}

func (_c *MockRegistry_Add_Call) Return(_a0 bool) *MockRegistry_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_Add_Call) RunAndReturn(run func(string, strfmt.Format, strfmt.Validator) bool) *MockRegistry_Add_Call {
	_c.Call.Return(run)
	return _c
}

// ContainsName provides a mock function with given fields: _a0
func (_m *MockRegistry) ContainsName(_a0 string) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockRegistry_ContainsName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainsName'
type MockRegistry_ContainsName_Call struct {
	*mock.Call
}

// ContainsName is a helper method to define mock.On call
//   - _a0 string
func (_e *MockRegistry_Expecter) ContainsName(_a0 interface{}) *MockRegistry_ContainsName_Call {
	return &MockRegistry_ContainsName_Call{Call: _e.mock.On("ContainsName", _a0)}
}

func (_c *MockRegistry_ContainsName_Call) Run(run func(_a0 string)) *MockRegistry_ContainsName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRegistry_ContainsName_Call) Return(_a0 bool) *MockRegistry_ContainsName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_ContainsName_Call) RunAndReturn(run func(string) bool) *MockRegistry_ContainsName_Call {
	_c.Call.Return(run)
	return _c
}

// DelByName provides a mock function with given fields: _a0
func (_m *MockRegistry) DelByName(_a0 string) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockRegistry_DelByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelByName'
type MockRegistry_DelByName_Call struct {
	*mock.Call
}

// DelByName is a helper method to define mock.On call
//   - _a0 string
func (_e *MockRegistry_Expecter) DelByName(_a0 interface{}) *MockRegistry_DelByName_Call {
	return &MockRegistry_DelByName_Call{Call: _e.mock.On("DelByName", _a0)}
}

func (_c *MockRegistry_DelByName_Call) Run(run func(_a0 string)) *MockRegistry_DelByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRegistry_DelByName_Call) Return(_a0 bool) *MockRegistry_DelByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_DelByName_Call) RunAndReturn(run func(string) bool) *MockRegistry_DelByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetType provides a mock function with given fields: _a0
func (_m *MockRegistry) GetType(_a0 string) (reflect.Type, bool) {
	ret := _m.Called(_a0)

	var r0 reflect.Type
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (reflect.Type, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) reflect.Type); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(reflect.Type)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockRegistry_GetType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetType'
type MockRegistry_GetType_Call struct {
	*mock.Call
}

// GetType is a helper method to define mock.On call
//   - _a0 string
func (_e *MockRegistry_Expecter) GetType(_a0 interface{}) *MockRegistry_GetType_Call {
	return &MockRegistry_GetType_Call{Call: _e.mock.On("GetType", _a0)}
}

func (_c *MockRegistry_GetType_Call) Run(run func(_a0 string)) *MockRegistry_GetType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRegistry_GetType_Call) Return(_a0 reflect.Type, _a1 bool) *MockRegistry_GetType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRegistry_GetType_Call) RunAndReturn(run func(string) (reflect.Type, bool)) *MockRegistry_GetType_Call {
	_c.Call.Return(run)
	return _c
}

// MapStructureHookFunc provides a mock function with given fields:
func (_m *MockRegistry) MapStructureHookFunc() mapstructure.DecodeHookFunc {
	ret := _m.Called()

	var r0 mapstructure.DecodeHookFunc
	if rf, ok := ret.Get(0).(func() mapstructure.DecodeHookFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mapstructure.DecodeHookFunc)
		}
	}

	return r0
}

// MockRegistry_MapStructureHookFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MapStructureHookFunc'
type MockRegistry_MapStructureHookFunc_Call struct {
	*mock.Call
}

// MapStructureHookFunc is a helper method to define mock.On call
func (_e *MockRegistry_Expecter) MapStructureHookFunc() *MockRegistry_MapStructureHookFunc_Call {
	return &MockRegistry_MapStructureHookFunc_Call{Call: _e.mock.On("MapStructureHookFunc")}
}

func (_c *MockRegistry_MapStructureHookFunc_Call) Run(run func()) *MockRegistry_MapStructureHookFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRegistry_MapStructureHookFunc_Call) Return(_a0 mapstructure.DecodeHookFunc) *MockRegistry_MapStructureHookFunc_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_MapStructureHookFunc_Call) RunAndReturn(run func() mapstructure.DecodeHookFunc) *MockRegistry_MapStructureHookFunc_Call {
	_c.Call.Return(run)
	return _c
}

// Parse provides a mock function with given fields: _a0, _a1
func (_m *MockRegistry) Parse(_a0 string, _a1 string) (interface{}, error) {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (interface{}, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRegistry_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type MockRegistry_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *MockRegistry_Expecter) Parse(_a0 interface{}, _a1 interface{}) *MockRegistry_Parse_Call {
	return &MockRegistry_Parse_Call{Call: _e.mock.On("Parse", _a0, _a1)}
}

func (_c *MockRegistry_Parse_Call) Run(run func(_a0 string, _a1 string)) *MockRegistry_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockRegistry_Parse_Call) Return(_a0 interface{}, _a1 error) *MockRegistry_Parse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRegistry_Parse_Call) RunAndReturn(run func(string, string) (interface{}, error)) *MockRegistry_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// Validates provides a mock function with given fields: _a0, _a1
func (_m *MockRegistry) Validates(_a0 string, _a1 string) bool {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockRegistry_Validates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validates'
type MockRegistry_Validates_Call struct {
	*mock.Call
}

// Validates is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *MockRegistry_Expecter) Validates(_a0 interface{}, _a1 interface{}) *MockRegistry_Validates_Call {
	return &MockRegistry_Validates_Call{Call: _e.mock.On("Validates", _a0, _a1)}
}

func (_c *MockRegistry_Validates_Call) Run(run func(_a0 string, _a1 string)) *MockRegistry_Validates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockRegistry_Validates_Call) Return(_a0 bool) *MockRegistry_Validates_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_Validates_Call) RunAndReturn(run func(string, string) bool) *MockRegistry_Validates_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRegistry creates a new instance of MockRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegistry {
	mock := &MockRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
