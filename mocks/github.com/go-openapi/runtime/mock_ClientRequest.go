// Code generated by mockery v2.23.4. DO NOT EDIT.

package runtime

import (
	http "net/http"

	runtime "github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"

	time "time"

	url "net/url"
)

// MockClientRequest is an autogenerated mock type for the ClientRequest type
type MockClientRequest struct {
	mock.Mock
}

type MockClientRequest_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientRequest) EXPECT() *MockClientRequest_Expecter {
	return &MockClientRequest_Expecter{mock: &_m.Mock}
}

// GetBody provides a mock function with given fields:
func (_m *MockClientRequest) GetBody() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockClientRequest_GetBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBody'
type MockClientRequest_GetBody_Call struct {
	*mock.Call
}

// GetBody is a helper method to define mock.On call
func (_e *MockClientRequest_Expecter) GetBody() *MockClientRequest_GetBody_Call {
	return &MockClientRequest_GetBody_Call{Call: _e.mock.On("GetBody")}
}

func (_c *MockClientRequest_GetBody_Call) Run(run func()) *MockClientRequest_GetBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientRequest_GetBody_Call) Return(_a0 []byte) *MockClientRequest_GetBody_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientRequest_GetBody_Call) RunAndReturn(run func() []byte) *MockClientRequest_GetBody_Call {
	_c.Call.Return(run)
	return _c
}

// GetBodyParam provides a mock function with given fields:
func (_m *MockClientRequest) GetBodyParam() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockClientRequest_GetBodyParam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBodyParam'
type MockClientRequest_GetBodyParam_Call struct {
	*mock.Call
}

// GetBodyParam is a helper method to define mock.On call
func (_e *MockClientRequest_Expecter) GetBodyParam() *MockClientRequest_GetBodyParam_Call {
	return &MockClientRequest_GetBodyParam_Call{Call: _e.mock.On("GetBodyParam")}
}

func (_c *MockClientRequest_GetBodyParam_Call) Run(run func()) *MockClientRequest_GetBodyParam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientRequest_GetBodyParam_Call) Return(_a0 interface{}) *MockClientRequest_GetBodyParam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientRequest_GetBodyParam_Call) RunAndReturn(run func() interface{}) *MockClientRequest_GetBodyParam_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileParam provides a mock function with given fields:
func (_m *MockClientRequest) GetFileParam() map[string][]runtime.NamedReadCloser {
	ret := _m.Called()

	var r0 map[string][]runtime.NamedReadCloser
	if rf, ok := ret.Get(0).(func() map[string][]runtime.NamedReadCloser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]runtime.NamedReadCloser)
		}
	}

	return r0
}

// MockClientRequest_GetFileParam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileParam'
type MockClientRequest_GetFileParam_Call struct {
	*mock.Call
}

// GetFileParam is a helper method to define mock.On call
func (_e *MockClientRequest_Expecter) GetFileParam() *MockClientRequest_GetFileParam_Call {
	return &MockClientRequest_GetFileParam_Call{Call: _e.mock.On("GetFileParam")}
}

func (_c *MockClientRequest_GetFileParam_Call) Run(run func()) *MockClientRequest_GetFileParam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientRequest_GetFileParam_Call) Return(_a0 map[string][]runtime.NamedReadCloser) *MockClientRequest_GetFileParam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientRequest_GetFileParam_Call) RunAndReturn(run func() map[string][]runtime.NamedReadCloser) *MockClientRequest_GetFileParam_Call {
	_c.Call.Return(run)
	return _c
}

// GetHeaderParams provides a mock function with given fields:
func (_m *MockClientRequest) GetHeaderParams() http.Header {
	ret := _m.Called()

	var r0 http.Header
	if rf, ok := ret.Get(0).(func() http.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Header)
		}
	}

	return r0
}

// MockClientRequest_GetHeaderParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeaderParams'
type MockClientRequest_GetHeaderParams_Call struct {
	*mock.Call
}

// GetHeaderParams is a helper method to define mock.On call
func (_e *MockClientRequest_Expecter) GetHeaderParams() *MockClientRequest_GetHeaderParams_Call {
	return &MockClientRequest_GetHeaderParams_Call{Call: _e.mock.On("GetHeaderParams")}
}

func (_c *MockClientRequest_GetHeaderParams_Call) Run(run func()) *MockClientRequest_GetHeaderParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientRequest_GetHeaderParams_Call) Return(_a0 http.Header) *MockClientRequest_GetHeaderParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientRequest_GetHeaderParams_Call) RunAndReturn(run func() http.Header) *MockClientRequest_GetHeaderParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetMethod provides a mock function with given fields:
func (_m *MockClientRequest) GetMethod() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClientRequest_GetMethod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMethod'
type MockClientRequest_GetMethod_Call struct {
	*mock.Call
}

// GetMethod is a helper method to define mock.On call
func (_e *MockClientRequest_Expecter) GetMethod() *MockClientRequest_GetMethod_Call {
	return &MockClientRequest_GetMethod_Call{Call: _e.mock.On("GetMethod")}
}

func (_c *MockClientRequest_GetMethod_Call) Run(run func()) *MockClientRequest_GetMethod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientRequest_GetMethod_Call) Return(_a0 string) *MockClientRequest_GetMethod_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientRequest_GetMethod_Call) RunAndReturn(run func() string) *MockClientRequest_GetMethod_Call {
	_c.Call.Return(run)
	return _c
}

// GetPath provides a mock function with given fields:
func (_m *MockClientRequest) GetPath() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClientRequest_GetPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPath'
type MockClientRequest_GetPath_Call struct {
	*mock.Call
}

// GetPath is a helper method to define mock.On call
func (_e *MockClientRequest_Expecter) GetPath() *MockClientRequest_GetPath_Call {
	return &MockClientRequest_GetPath_Call{Call: _e.mock.On("GetPath")}
}

func (_c *MockClientRequest_GetPath_Call) Run(run func()) *MockClientRequest_GetPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientRequest_GetPath_Call) Return(_a0 string) *MockClientRequest_GetPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientRequest_GetPath_Call) RunAndReturn(run func() string) *MockClientRequest_GetPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueryParams provides a mock function with given fields:
func (_m *MockClientRequest) GetQueryParams() url.Values {
	ret := _m.Called()

	var r0 url.Values
	if rf, ok := ret.Get(0).(func() url.Values); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(url.Values)
		}
	}

	return r0
}

// MockClientRequest_GetQueryParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueryParams'
type MockClientRequest_GetQueryParams_Call struct {
	*mock.Call
}

// GetQueryParams is a helper method to define mock.On call
func (_e *MockClientRequest_Expecter) GetQueryParams() *MockClientRequest_GetQueryParams_Call {
	return &MockClientRequest_GetQueryParams_Call{Call: _e.mock.On("GetQueryParams")}
}

func (_c *MockClientRequest_GetQueryParams_Call) Run(run func()) *MockClientRequest_GetQueryParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientRequest_GetQueryParams_Call) Return(_a0 url.Values) *MockClientRequest_GetQueryParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientRequest_GetQueryParams_Call) RunAndReturn(run func() url.Values) *MockClientRequest_GetQueryParams_Call {
	_c.Call.Return(run)
	return _c
}

// SetBodyParam provides a mock function with given fields: _a0
func (_m *MockClientRequest) SetBodyParam(_a0 interface{}) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientRequest_SetBodyParam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBodyParam'
type MockClientRequest_SetBodyParam_Call struct {
	*mock.Call
}

// SetBodyParam is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *MockClientRequest_Expecter) SetBodyParam(_a0 interface{}) *MockClientRequest_SetBodyParam_Call {
	return &MockClientRequest_SetBodyParam_Call{Call: _e.mock.On("SetBodyParam", _a0)}
}

func (_c *MockClientRequest_SetBodyParam_Call) Run(run func(_a0 interface{})) *MockClientRequest_SetBodyParam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockClientRequest_SetBodyParam_Call) Return(_a0 error) *MockClientRequest_SetBodyParam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientRequest_SetBodyParam_Call) RunAndReturn(run func(interface{}) error) *MockClientRequest_SetBodyParam_Call {
	_c.Call.Return(run)
	return _c
}

// SetFileParam provides a mock function with given fields: _a0, _a1
func (_m *MockClientRequest) SetFileParam(_a0 string, _a1 ...runtime.NamedReadCloser) error {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...runtime.NamedReadCloser) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientRequest_SetFileParam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFileParam'
type MockClientRequest_SetFileParam_Call struct {
	*mock.Call
}

// SetFileParam is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...runtime.NamedReadCloser
func (_e *MockClientRequest_Expecter) SetFileParam(_a0 interface{}, _a1 ...interface{}) *MockClientRequest_SetFileParam_Call {
	return &MockClientRequest_SetFileParam_Call{Call: _e.mock.On("SetFileParam",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockClientRequest_SetFileParam_Call) Run(run func(_a0 string, _a1 ...runtime.NamedReadCloser)) *MockClientRequest_SetFileParam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]runtime.NamedReadCloser, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(runtime.NamedReadCloser)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientRequest_SetFileParam_Call) Return(_a0 error) *MockClientRequest_SetFileParam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientRequest_SetFileParam_Call) RunAndReturn(run func(string, ...runtime.NamedReadCloser) error) *MockClientRequest_SetFileParam_Call {
	_c.Call.Return(run)
	return _c
}

// SetFormParam provides a mock function with given fields: _a0, _a1
func (_m *MockClientRequest) SetFormParam(_a0 string, _a1 ...string) error {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...string) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientRequest_SetFormParam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFormParam'
type MockClientRequest_SetFormParam_Call struct {
	*mock.Call
}

// SetFormParam is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...string
func (_e *MockClientRequest_Expecter) SetFormParam(_a0 interface{}, _a1 ...interface{}) *MockClientRequest_SetFormParam_Call {
	return &MockClientRequest_SetFormParam_Call{Call: _e.mock.On("SetFormParam",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockClientRequest_SetFormParam_Call) Run(run func(_a0 string, _a1 ...string)) *MockClientRequest_SetFormParam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientRequest_SetFormParam_Call) Return(_a0 error) *MockClientRequest_SetFormParam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientRequest_SetFormParam_Call) RunAndReturn(run func(string, ...string) error) *MockClientRequest_SetFormParam_Call {
	_c.Call.Return(run)
	return _c
}

// SetHeaderParam provides a mock function with given fields: _a0, _a1
func (_m *MockClientRequest) SetHeaderParam(_a0 string, _a1 ...string) error {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...string) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientRequest_SetHeaderParam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHeaderParam'
type MockClientRequest_SetHeaderParam_Call struct {
	*mock.Call
}

// SetHeaderParam is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...string
func (_e *MockClientRequest_Expecter) SetHeaderParam(_a0 interface{}, _a1 ...interface{}) *MockClientRequest_SetHeaderParam_Call {
	return &MockClientRequest_SetHeaderParam_Call{Call: _e.mock.On("SetHeaderParam",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockClientRequest_SetHeaderParam_Call) Run(run func(_a0 string, _a1 ...string)) *MockClientRequest_SetHeaderParam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientRequest_SetHeaderParam_Call) Return(_a0 error) *MockClientRequest_SetHeaderParam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientRequest_SetHeaderParam_Call) RunAndReturn(run func(string, ...string) error) *MockClientRequest_SetHeaderParam_Call {
	_c.Call.Return(run)
	return _c
}

// SetPathParam provides a mock function with given fields: _a0, _a1
func (_m *MockClientRequest) SetPathParam(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientRequest_SetPathParam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPathParam'
type MockClientRequest_SetPathParam_Call struct {
	*mock.Call
}

// SetPathParam is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *MockClientRequest_Expecter) SetPathParam(_a0 interface{}, _a1 interface{}) *MockClientRequest_SetPathParam_Call {
	return &MockClientRequest_SetPathParam_Call{Call: _e.mock.On("SetPathParam", _a0, _a1)}
}

func (_c *MockClientRequest_SetPathParam_Call) Run(run func(_a0 string, _a1 string)) *MockClientRequest_SetPathParam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockClientRequest_SetPathParam_Call) Return(_a0 error) *MockClientRequest_SetPathParam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientRequest_SetPathParam_Call) RunAndReturn(run func(string, string) error) *MockClientRequest_SetPathParam_Call {
	_c.Call.Return(run)
	return _c
}

// SetQueryParam provides a mock function with given fields: _a0, _a1
func (_m *MockClientRequest) SetQueryParam(_a0 string, _a1 ...string) error {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...string) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientRequest_SetQueryParam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetQueryParam'
type MockClientRequest_SetQueryParam_Call struct {
	*mock.Call
}

// SetQueryParam is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...string
func (_e *MockClientRequest_Expecter) SetQueryParam(_a0 interface{}, _a1 ...interface{}) *MockClientRequest_SetQueryParam_Call {
	return &MockClientRequest_SetQueryParam_Call{Call: _e.mock.On("SetQueryParam",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockClientRequest_SetQueryParam_Call) Run(run func(_a0 string, _a1 ...string)) *MockClientRequest_SetQueryParam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientRequest_SetQueryParam_Call) Return(_a0 error) *MockClientRequest_SetQueryParam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientRequest_SetQueryParam_Call) RunAndReturn(run func(string, ...string) error) *MockClientRequest_SetQueryParam_Call {
	_c.Call.Return(run)
	return _c
}

// SetTimeout provides a mock function with given fields: _a0
func (_m *MockClientRequest) SetTimeout(_a0 time.Duration) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Duration) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientRequest_SetTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTimeout'
type MockClientRequest_SetTimeout_Call struct {
	*mock.Call
}

// SetTimeout is a helper method to define mock.On call
//   - _a0 time.Duration
func (_e *MockClientRequest_Expecter) SetTimeout(_a0 interface{}) *MockClientRequest_SetTimeout_Call {
	return &MockClientRequest_SetTimeout_Call{Call: _e.mock.On("SetTimeout", _a0)}
}

func (_c *MockClientRequest_SetTimeout_Call) Run(run func(_a0 time.Duration)) *MockClientRequest_SetTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockClientRequest_SetTimeout_Call) Return(_a0 error) *MockClientRequest_SetTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientRequest_SetTimeout_Call) RunAndReturn(run func(time.Duration) error) *MockClientRequest_SetTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientRequest creates a new instance of MockClientRequest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientRequest(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientRequest {
	mock := &MockClientRequest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
